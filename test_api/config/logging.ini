;记录器，提供应用程序代码直接使用接口
[loggers]
; 声明3个记录器
keys = root,file,fileAndConsole
[handlers]
; 声明处理器
keys = fileHandler,consoleHandler
[formatters]
; 设置日志格式
keys = simpleFormatter
; 定义logger模块。节名命令规则logger_name,name来之logger里面定义的keys
; 必须包含一个名叫root的logger，root是父类必须存在，其他自定义
[logger_root]
level = DEBUG
; handler处理后输出的位置
handlers = consoleHandler
[logger_file]
level = DEBUG
; handler处理后输出的位置
handlers = fileHandler
; qualname定义logger对象需要绑定的日志策略名字
qualname = file
; propagate是将日志传给上游（多级上游，顶级为root，以foo.A.B类似表示，foo就是A,B的顶级，A就是B的父级）
; 0表示不继承
propagate = 0
[logger_fileAndConsole]
vel = DEBUG
handlers = fileHandler,consoleHandler
qualname = fileAndConsole
propagate = 0

[handler_consoleHandler]
class = StreamHandler
args = (sys.stdout,)
level = DEBUG
formatter = simpleFormatter

[handler_fileHandler]
class = handlers.TimedRotatingFileHandler
; filename：日志文件名
; when：日志文件按什么维度切分。'S'-秒；'M'-分钟；'H'-小时；'D'-天；'W'-周
;      这里需要注意，如果选择 D-天，那么这个不是严格意义上的'天'，而是从你
;      项目启动开始，过了24小时，才会从新创建一个新的日志文件，
;      如果项目重启，这个时间就会重置。所以这里选择'MIDNIGHT'-是指过了午夜12点，就会创建新的日志。
; interval：是指等待多少个单位 when 的时间后，Logger会自动重建文件。
; backupCount：是保留日志个数。默认的0是不会自动删除掉日志。
; encoding=None  -编码格式
; delay=False  延迟时间
args = ('./logs/log.log','midnight',1,0)
level = DEBUG
backupCount = 10
formatter = simpleFormatter

[formatter_simpleFormatter]
format = %(asctime)s %(module)s [%(threadName)s:%(filename)s:%(lineno)d] %(levelname)6s : %(message)s
datefmt = %Y-%m-%d %H:%M:%S